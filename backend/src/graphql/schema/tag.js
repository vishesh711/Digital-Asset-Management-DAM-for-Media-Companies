const { gql } = require('apollo-server-express');

const tagSchema = gql`
  # Tag type
  type Tag {
    id: ID!
    tenantId: ID!
    name: String!
    category: String
    color: String
    isAutoGenerated: Boolean!
    confidence: Float
    assets: [Asset]
    createdAt: DateTime!
    updatedAt: DateTime
  }

  # Tag response
  type TagResponse implements Response {
    success: Boolean!
    message: String
    tag: Tag
  }

  # Multiple tags response
  type TagsResponse implements Response {
    success: Boolean!
    message: String
    tags: [Tag]
    totalCount: Int
  }

  # Create tag input
  input CreateTagInput {
    name: String!
    category: String
    color: String
    isAutoGenerated: Boolean
  }

  # Update tag input
  input UpdateTagInput {
    name: String
    category: String
    color: String
  }

  # Tag search input
  input TagSearchInput {
    query: String
    categories: [String]
    isAutoGenerated: Boolean
  }

  # Extend the Query type
  extend type Query {
    # Get tag by ID
    tag(id: ID!): TagResponse

    # Get all tags with filtering and pagination
    tags(
      search: TagSearchInput
      pagination: PaginationInput
      sort: SortInput
    ): TagsResponse

    # Get tags for an asset
    assetTags(assetId: ID!): [Tag]

    # Get tag categories
    tagCategories: [String]
  }

  # Extend the Mutation type
  extend type Mutation {
    # Create a new tag
    createTag(input: CreateTagInput!): TagResponse

    # Update tag
    updateTag(id: ID!, input: UpdateTagInput!): TagResponse

    # Delete tag
    deleteTag(id: ID!): TagResponse

    # Add tags to an asset
    addTagsToAsset(assetId: ID!, tagIds: [ID!]!): [Tag]

    # Remove tags from an asset
    removeTagsFromAsset(assetId: ID!, tagIds: [ID!]!): [Tag]

    # Generate tags for an asset using AI
    generateTagsForAsset(assetId: ID!): [Tag]
  }
`;

module.exports = tagSchema; 